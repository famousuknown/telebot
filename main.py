import os
from gtts import gTTS
from io import BytesIO
from pydub import AudioSegment
import speech_recognition as sr
import tempfile
from deep_translator import GoogleTranslator
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TARGET_LANG = os.getenv("TARGET_LANG", "en")

recognizer = sr.Recognizer()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_menu():
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –¢–µ–∫—Å—Ç ‚Üí –ü–µ—Ä–µ–≤–æ–¥", callback_data="mode_text"),
            InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å ‚Üí –ü–µ—Ä–µ–≤–æ–¥", callback_data="mode_voice"),
        ],
        [
            InlineKeyboardButton("üó£ –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="mode_voice_tts"),
            InlineKeyboardButton("üß¨ –ò–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞", callback_data="mode_voice_clone"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" ===
back_button_markup = InlineKeyboardMarkup([
    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
])

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = None
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=get_main_menu())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ===
async def handle_mode_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_mode = query.data
    context.user_data["mode"] = selected_mode

    mode_names = {
        "mode_text": "–¢–µ–∫—Å—Ç ‚Üí –ü–µ—Ä–µ–≤–æ–¥",
        "mode_voice": "–ì–æ–ª–æ—Å ‚Üí –ü–µ—Ä–µ–≤–æ–¥",
        "mode_voice_tts": "–ì–æ–ª–æ—Å ‚Üí –ü–µ—Ä–µ–≤–æ–¥ + –û–∑–≤—É—á–∫–∞",
        "mode_voice_clone": "–ò–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ (–≤ –±—É–¥—É—â–µ–º)",
    }

    await query.edit_message_text(
        text=f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: *{mode_names[selected_mode]}*",
        parse_mode="Markdown",
        reply_markup=back_button_markup
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" ===
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["mode"] = None
    await query.edit_message_text("üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# === –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")

    if mode == "mode_text":
        original_text = update.message.text
        translated = GoogleTranslator(source='auto', target=TARGET_LANG).translate(original_text)
        await update.message.reply_text(
            f"üåê –ü–µ—Ä–µ–≤–æ–¥ ({TARGET_LANG}): {translated}",
            reply_markup=back_button_markup
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º üìÑ –¢–µ–∫—Å—Ç ‚Üí –ü–µ—Ä–µ–≤–æ–¥ (/start).",
            reply_markup=back_button_markup
        )

# === –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")

    if mode is None:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é /start.", reply_markup=back_button_markup)
        return

    voice = await update.message.voice.get_file()
    voice_file = BytesIO()
    await voice.download_to_memory(out=voice_file)
    voice_file.seek(0)

    audio = AudioSegment.from_ogg(voice_file)
    wav_io = BytesIO()
    audio.export(wav_io, format="wav")
    wav_io.seek(0)

    try:
        with sr.AudioFile(wav_io) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            translated = GoogleTranslator(source='auto', target=TARGET_LANG).translate(text)

            if mode == "mode_voice":
                await update.message.reply_text(
                    f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}\n\nüåê –ü–µ—Ä–µ–≤–æ–¥ ({TARGET_LANG}): {translated}",
                    reply_markup=back_button_markup
                )

            elif mode == "mode_voice_tts":
                tts = gTTS(translated, lang=TARGET_LANG)
                with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as tmp_file:
                    tts.save(tmp_file.name)
                    tmp_file_path = tmp_file.name

                with open(tmp_file_path, "rb") as audio_file:
                    await update.message.reply_voice(voice=audio_file, reply_markup=back_button_markup)

                os.remove(tmp_file_path)

            elif mode == "mode_voice_clone":
                await update.message.reply_text(
                    "üß¨ –ò–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
                    reply_markup=back_button_markup
                )

    except sr.UnknownValueError:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.", reply_markup=back_button_markup)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=back_button_markup)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_mode_selection, pattern="^mode_"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()