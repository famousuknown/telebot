import os
from io import BytesIO
from pydub import AudioSegment
import speech_recognition as sr
from deep_translator import GoogleTranslator
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, CallbackQueryHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TARGET_LANG = os.getenv("TARGET_LANG", "en")

recognizer = sr.Recognizer()
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import os
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# === –ö–ù–û–ü–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –¢–µ–∫—Å—Ç ‚Üí –ü–µ—Ä–µ–≤–æ–¥", callback_data="mode_text"),
            InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å ‚Üí –ü–µ—Ä–µ–≤–æ–¥", callback_data="mode_voice"),
        ],
        [
            InlineKeyboardButton("üó£ –û–∑–≤—É—á–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="mode_voice_tts"),
            InlineKeyboardButton("üß¨ –ò–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞", callback_data="mode_voice_clone"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:", reply_markup=reply_markup)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")
    
    if mode == "mode_voice":
        # —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å ‚Üí –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚Üí –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç
        pass
    elif mode == "mode_voice_tts":
        # —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ‚Üí –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚Üí –æ–∑–≤—É—á–∏—Ç—å
        pass
    elif mode == "mode_voice_clone":
        await update.message.reply_text("üéõ –ò–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å –ø–æ–º–æ—â—å—é /start.")

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê ===
async def handle_mode_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected_mode = query.data
    context.user_data["mode"] = selected_mode

    mode_names = {
        "mode_text": "–¢–µ–∫—Å—Ç ‚Üí –ü–µ—Ä–µ–≤–æ–¥",
        "mode_voice": "–ì–æ–ª–æ—Å ‚Üí –ü–µ—Ä–µ–≤–æ–¥",
        "mode_voice_tts": "–ì–æ–ª–æ—Å ‚Üí –ü–µ—Ä–µ–≤–æ–¥ + –û–∑–≤—É—á–∫–∞",
        "mode_voice_clone": "–ò–º–∏—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ (–≤ –±—É–¥—É—â–µ–º)",
    }

    await query.edit_message_text(text=f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: *{mode_names[selected_mode]}*", parse_mode="Markdown")

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–ø–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ!!!") #—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏

    voice = await update.message.voice.get_file()
    voice_file = BytesIO()
    await voice.download_to_memory(out=voice_file)
    voice_file.seek(0)

    audio = AudioSegment.from_ogg(voice_file)
    wav_io = BytesIO()
    audio.export(wav_io, format="wav")
    wav_io.seek(0)

    try:
        with sr.AudioFile(wav_io) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            translated = GoogleTranslator(source='auto', target=TARGET_LANG).translate(text)

            await update.message.reply_text(
                f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}\n\nüåê –ü–µ—Ä–µ–≤–æ–¥ ({TARGET_LANG}): {translated}"
            )
    except sr.UnknownValueError:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

# üëá –î–æ–±–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ /start, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ.")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_mode_selection))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()